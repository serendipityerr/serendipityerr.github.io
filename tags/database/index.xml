<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>DataBase on Serendipity&#39;s Blog</title>
        <link>http://localhost:1313/tags/database/</link>
        <description>Recent content in DataBase on Serendipity&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 24 Feb 2025 19:06:28 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/database/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Notes on DataBase</title>
        <link>http://localhost:1313/p/notes-on-database/</link>
        <pubDate>Mon, 24 Feb 2025 19:06:28 +0800</pubDate>
        
        <guid>http://localhost:1313/p/notes-on-database/</guid>
        <description>&lt;h2 id=&#34;绪论&#34;&gt;绪论
&lt;/h2&gt;&lt;h3 id=&#34;四个基本概念&#34;&gt;四个基本概念
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据：描述事物的符号记录。&lt;/li&gt;
&lt;li&gt;数据库：概括地讲，数据库数据具有永久存储、有组织和可共享的三个基本特点。严格地讲：数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。&lt;/li&gt;
&lt;li&gt;数据库管理系统：是位于用户和操作系统之间的一层数据管理软件。和操作系统一样是计算机的基础软件。主要功能：
&lt;ol&gt;
&lt;li&gt;数据定义功能&lt;/li&gt;
&lt;li&gt;数据组织、存储和管理&lt;/li&gt;
&lt;li&gt;数据操纵功能&lt;/li&gt;
&lt;li&gt;数据库的事务管理和运行管理&lt;/li&gt;
&lt;li&gt;数据库的建立和维护功能&lt;/li&gt;
&lt;li&gt;其他功能（通信功能，数据转换功能，互访和互操作功能等）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据库系统：是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据库的发展阶段&#34;&gt;数据库的发展阶段
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;人工管理阶段：数据不保存、不共享、不具有独立性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件系统阶段：可保存，但共享性差，冗余度大，独立性差。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库管理系统：数据库系统的出现使信息系统从以加工数据的程序为中心转向围绕共享的数据库为中心的新阶段。&lt;/p&gt;
&lt;p&gt;数据的共享性高、冗余度低且易扩充：数据共享可以大大减少数据冗余，节约存储空间。&lt;/p&gt;
&lt;p&gt;数据独立性高：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理独立性：是指用户的应用程序与数据库中数据的物理存储是相互独立的。&lt;/li&gt;
&lt;li&gt;逻辑独立性：是指用户的应用程序与数据库的逻辑结构是相互独立的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据由数据库管理系统统一管理和控制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据模型&#34;&gt;数据模型
&lt;/h3&gt;&lt;p&gt;两类数据模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念模型：也称信息模型，它是按用户观点来对数据和信息建模，主要用于数据库设计。
基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体：客观存在并可相互区别的事物。e.g. 人&lt;/li&gt;
&lt;li&gt;属性：实体所具有的某一特性。e.g. 人的鼻子 嘴巴&lt;/li&gt;
&lt;li&gt;码：唯一标识实体的属性。e.g. 学号&lt;/li&gt;
&lt;li&gt;实体型：用实体名及其属性集合来抽象和刻画同类实体。e.g. 含有鼻子和嘴巴的人 （实体+属性）&lt;/li&gt;
&lt;li&gt;实体集：同一类型实体的集合。e.g. 学校 （很多实体型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;概念模型的一种表示方法：实体-联系方法。用&lt;code&gt;E-R图&lt;/code&gt;来措述现实世界的概念模型，&lt;code&gt;E-R方法&lt;/code&gt;也称为&lt;code&gt;E-R模型&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑模型和物理模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑模型：它是按计算机系统的观点对数据建模，主要用于数据库管理系统的实现。包括：
&lt;ol&gt;
&lt;li&gt;层次模型&lt;/li&gt;
&lt;li&gt;网状模型&lt;/li&gt;
&lt;li&gt;关系模型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;物理模型：是对数据最底层的抽象，它描述数据在系统内部的表示方法和存取方法，或在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;er图&#34;&gt;ER图
&lt;/h4&gt;&lt;p&gt;ER图分为实体、属性和关系三个部分。实体用长方形，属性是椭圆形，关系是菱形。&lt;strong&gt;唯一的标识：主键。&lt;/strong&gt;
&lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/er.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;联系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体之间的联系通常是指不同实体集之间的联系。实体之间的联系有一对一、一对多和多对多等多种联系。&lt;/li&gt;
&lt;li&gt;实体内部的联系通常是指实体各属性之间的联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常用的数据模型&#34;&gt;常用的数据模型
&lt;/h4&gt;&lt;p&gt;常用的数据模型：层次模型，网状模型，关系模型，面向对象数据模型，对象关系数据模型，半结构化数据模型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;层次模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有且只有一个结点没有双亲结点，这个结点称为根结点。&lt;/li&gt;
&lt;li&gt;根以外的其他结点有且只有一个双亲结点。&lt;/li&gt;
&lt;/ol&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/ccmodel.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网状模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;允许一个以上的结点无双亲&lt;/li&gt;
&lt;li&gt;一个结点可以有多于一个双亲&lt;/li&gt;
&lt;/ol&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/wmodel.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系模型：对应一张表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元组：表中的一行。&lt;/li&gt;
&lt;li&gt;属性：表中的一列。&lt;/li&gt;
&lt;li&gt;码：也称码键，表中的某个属性组。&lt;/li&gt;
&lt;li&gt;域：是一组具有相同数据类型的值的集合。&lt;/li&gt;
&lt;li&gt;分量：元组中的一个属性。&lt;/li&gt;
&lt;/ol&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/remodel.png&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库系统的结构&#34;&gt;数据库系统的结构
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;模式数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。其一个具体值称为模式的一个实例。模式是相对稳定的，实例是相对变动的。&lt;/p&gt;
&lt;p&gt;三级模式结构：外模式+模式+内模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外模式：也称子模式或用户模式，它是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模式：也称为逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内模式：也称存储模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/model.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二级映像：
&lt;code&gt;外模式/模式映像&lt;/code&gt;：当模式改变时，由数据库管理员对各个&lt;code&gt;外模式/模式映像&lt;/code&gt;作相应改变，可以使外模式保持不变。应用程序不必修改。保证了数据与程序的逻辑独立性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;模式/内模式映像&lt;/code&gt;：当数据库的存储结构改变时，有数据库管理员对&lt;code&gt;模式/内模式映像&lt;/code&gt;作相应改变，可以使模式保持不变，从而应用程序也不用改变。保证了数据与程序的物理独立性。&lt;/p&gt;
&lt;p&gt;数据与程序之间的独立性使得数据的定义和描述可以从应用程序中分离出去。另外，由于数据的存取由数据库管理系统管理，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。&lt;/p&gt;
&lt;h3 id=&#34;数据库系统的组成&#34;&gt;数据库系统的组成
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;硬件平台及数据库：足够大内存、磁盘或磁盘阵列等设备，较高的通道能力以提高数据的传送率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件：数据库管理系统，支持数据库管理系统运行的操作系统，具有与数据库接口的高级语言及其编译系统，以数据库管理系统为核心的应用开发工具，为特定应用环境开发的数据库应用系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人员：开发、管理和使用数据库的人员主要包括数据库管理员、系统分析员和数据库设计人员、应用程序员和最终用户。&lt;/p&gt;
&lt;p&gt;数据库管理员职责：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;决定数据库中的信息内容和结构&lt;/li&gt;
&lt;li&gt;决定数据库的存储结构和存取策略&lt;/li&gt;
&lt;li&gt;定义数据的安全性要求和完整性约束条件&lt;/li&gt;
&lt;li&gt;监控数据库的使用和运行&lt;/li&gt;
&lt;li&gt;数据库的改进和重组、重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;关系&#34;&gt;关系
&lt;/h3&gt;&lt;p&gt;可以形象地表示为 &lt;code&gt;R(U, D, DOM, F)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R:关系名&lt;/li&gt;
&lt;li&gt;U:所有属性名&lt;/li&gt;
&lt;li&gt;D：属性来自哪些域&lt;/li&gt;
&lt;li&gt;DOM：属性和域的映射&lt;/li&gt;
&lt;li&gt;F: 属性间的依赖关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系语言的分类&#34;&gt;关系语言的分类
&lt;/h3&gt;&lt;p&gt;分为关系代数语言，关系演算语言和SQL语言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;关系代数语言：一种抽象的查询语言，它用对关系的运算来表达查询。&lt;/p&gt;
&lt;p&gt;三大要素：运算对象（关系）、运算符（集合运算符和专门的关系运算符）和运算结果（关系）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;R $\cap$ S：交 (union)：结果由既属于R又属于S的元组组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R $\cup$ S：并 (intersection)：结果由属于R和属于S的所有元组组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R $-$ S：差 (difference)：结果由属于R而不属于S的所有元组组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R $\times$ S：笛卡尔积 (product)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将 R 中的每个元组 $t_1$ 和 S 中的每个元组 $t_2$ 配对连接&lt;/li&gt;
&lt;li&gt;列数：$n+m$&lt;/li&gt;
&lt;li&gt;前 $n$ 列是关系 R 的一个元组 $t_1$&lt;/li&gt;
&lt;li&gt;后 $m$ 列是关系 S 的一个元组 $t_2$&lt;/li&gt;
&lt;li&gt;行数：$k_1 \times k_2$&lt;/li&gt;
&lt;li&gt;当 R 和 S 中有重名属性 A 时，则采用 R.A 和 S.A 分别命名对应的属性列&lt;/li&gt;
&lt;/ul&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/product.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\sigma_C$(R)：选择 (selection)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于在关系R中选择满足给定条件的各个元组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C：选择条件，是一个逻辑表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果为只包含R中某些元组的新的关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一些运算符：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;比较运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$&amp;gt;$：大于&lt;/li&gt;
&lt;li&gt;$\ge$：大于等于&lt;/li&gt;
&lt;li&gt;$&amp;lt;$：小于&lt;/li&gt;
&lt;li&gt;$\le$：小于等于&lt;/li&gt;
&lt;li&gt;$=$：等于&lt;/li&gt;
&lt;li&gt;&amp;lt;&amp;gt;：不等于&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\neg$：非&lt;/li&gt;
&lt;li&gt;$\wedge$：与&lt;/li&gt;
&lt;li&gt;$\vee$：或&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/selection.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\Pi_L$(R)：投影 (projection)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于从R中选择出若干属性列组成新的关系(默认去重)&lt;/li&gt;
&lt;li&gt;L为R中的属性列表&lt;/li&gt;
&lt;li&gt;结果为只包含R中某些列的新的关系&lt;/li&gt;
&lt;li&gt;结果要去掉重复元组&lt;/li&gt;
&lt;/ul&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/projection.png&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R $\Join$ S：连接 (Join)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A $\theta$ B：
&lt;ul&gt;
&lt;li&gt;A 和 B：分别为 R 和 S 上度数相等且可比的属性组&lt;/li&gt;
&lt;li&gt;$\theta$：比较运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;等值连接：$\theta$ 为 $=$ 的连接运算称为等值连接
&lt;ul&gt;
&lt;li&gt;从关系 R 与 S 的笛卡尔积中选取A、B属性值相等的那些元组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自然连接是在公共属性（组）上进行的等值连接
&lt;ul&gt;
&lt;li&gt;两个关系中必须具有公共属性（组）&lt;/li&gt;
&lt;li&gt;在结果中把重复的属性列去掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/join.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;悬浮元组(Dangling tuple)：两个关系 R 和 S 在做自然连接时，关系 R 中某些元组有可能在 S 中不存在公共属性上值相等的元组，从而造成 R 中这些元组在操作时被舍弃了，这些被舍弃的元组称为悬浮元组。&lt;/li&gt;
&lt;li&gt;外连接(Outer Join)：如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(Null)，就叫做外连接。&lt;/li&gt;
&lt;li&gt;左外连接(Left Outer Join或Left Join)：只保留左边关系 R 中的悬浮元组&lt;/li&gt;
&lt;li&gt;右外连接(Right Outer Join或Right Join)：只保留右边关系 S 中的悬浮元组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R $\div$ S：保留 R 中满足 S 的，而且 R 中的列去掉 S 的列。
&lt;img src=&#34;http://localhost:1313/post_img/2025-02-24/divide.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关系的完整性&#34;&gt;关系的完整性
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;实体完整性(Entity Integrity)：主码唯一且非空&lt;/li&gt;
&lt;li&gt;参照完整性(Referential Integrity)：外码要么为空，要么对应另一表的主码。
&lt;ul&gt;
&lt;li&gt;外码：外码是一个关系中的属性。例如，如果关系R1中的属性X是关系R2的主码，那么X就是R1的外码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户定义完整性(User-defined Integrity)：是针对特定应用领域定义的数据约束条件。它包括字段的值域、数据类型和有效性规则等。这些约束条件反映了特定应用所涉及的数据必须满足的应用语义要求，例如，一个年龄字段可能被限制只能包含正整数。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;typed-text-container&#34;&gt;
  &lt;span id=&#34;typed-text&#34;&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;script src=&#34;https://cdn.jsdelivr.net/npm/typed.js@2.0.12/typed.min.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
  document.addEventListener(&#34;DOMContentLoaded&#34;, function () {
    var typed = new Typed(&#34;#typed-text&#34;, {
      strings: [&#34;to be continued...&#34;],
      typeSpeed: 50,
      backSpeed: 20,
      loop: true
    });
  });
&lt;/script&gt;</description>
        </item>
        
    </channel>
</rss>
