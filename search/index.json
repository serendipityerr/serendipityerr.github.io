[{"content":"Use SSH on GitHub\rBelow are the detailed step-by-step instructions for configuring and using SSH on GitHub from scratch:\nCheck for an existing SSH Key\rFirst, check if you have an existing SSH key locally:\n1 2 cd ~/.ssh ls If the id_rsa and id_rsa.pub files exist, an SSH Key already exists and you can skip the generation step.\nGenerate an SSH Key\rIf you do not have an SSH Key, you can generate one using the following command:\n1 ssh-keygen -t rsa -C \u0026#34;your_email@example.com\u0026#34; Press Enter to use the default settings.\nGet SSH Public Key Content\rAfter generating the SSH Key, get the content of the public key in one of the two ways:\nrun the following command: 1 cat ~/.ssh/id_rsa.pub open id_rsa.pub file in txt Copy the contents.\nAdd the Public Key on GitHub\r→ Log in to GitHub → Go to Settings → Select SSH and GPG keys → Click New SSH key → Paste the copied contents of the public key into the Key text box → Click Add SSH key\nVerify the SSH Configuration\rVerify that the configuration was successful using the following command in the terminal:\n1 ssh -T git@github.com If it says Hi username! You've successfully authenticated, but GitHub does not provide shell access, then the configuration was successful.\nClone and Push Code\rAfter successful configuration, you can clone and push code using SSH URLs.\nClone the repository: 1 git clone git@github.com:username/repository.git Push the code: 1 2 3 4 cd repository name git add git commit -m \u0026#34;first-commit\u0026#34; git push origin main ","date":"2025-05-19T23:10:50+08:00","permalink":"https://example.com/p/git-and-ssh/","title":"Git and SSH"},{"content":" ","date":"2025-03-23T19:12:10+08:00","permalink":"https://example.com/p/notes-on-optimal-transport/","title":"Notes on Optimal Transport"},{"content":"The following tables are extracted from The Not So Short Introduction to LaTeX2e, aka. LaTeX2e in 90 minutes, by Tobias Oetiker, Hubert Partl, Irene Hyna, and Elisabeth Schlegl. It can be located here.\nTable: Math Mode Accents\r1 2 3 \\hat{} \\check{} \\tilde{} \\acute{} \\grave{} \\dot{} \\ddot{} \\breve{} \\bar{} \\vec{} \\widehat{} \\widetilde{} Table: Lowercase Greek Letters\r1 2 3 4 5 6 7 8 \\alpha \\theta o \\upsilon \\beta \\vartheta \\pi \\phi \\gamma \\iota \\varpi \\varphi \\delta \\kappa \\rho \\chi \\epsilon \\lambda \\varrho \\psi \\varepsilon \\mu \\sigma \\omega \\zeta \\nu \\varsigma \\eta \\xi \\tau Table: Uppercase Greek Letters\r1 2 3 \\Gamma \\Lambda \\Sigma \\Psi \\Delta \\Xi \\Upsilon \\Omega \\Theta \\Pi \\Phi Table: Binary Relations\rYou can produce corresponding negations by adding a \\not command as prefix to the following symbols.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt; \u0026gt; = \\leq or \\le \\geq or \\ge \\equiv \\ll \\gg \\doteq \\prec \\succ \\sim \\preceq \\succeq \\simeq \\subset \\supset \\approx \\subseteq \\supseteq \\cong \\sqsubset \\sqsupset \\Join \\sqsubseteq \\sqsupseteq \\bowtie \\in \\ni or \\owns \\propto \\vdash \\dashv \\models \\mid \\parallel \\perp \\smile \\frown \\asymp : \\notin \\neq or \\ne $^a$ Use the latexsym package to access this symbol\nTable: Binary Operators\r1 2 3 4 5 6 7 8 9 10 11 12 13 + - \\pm \\mp \\triangleleft \\cdot \\div \\triangleright \\times \\setminus \\star \\cup \\cap \\ast \\sqcup \\sqcap \\circ \\vee or \\lor \\wedge or \\land \\bullet \\oplus \\ominus \\diamond \\odot \\oslash \\uplus \\otimes \\bigcirc \\amalg \\bigtriangleup \\bigtriangledown \\dagger \\lhd \\rhd \\ddagger \\unlhd \\unrhd \\wr $^a$ Use the latexsym package to access this symbol\nTable: BIG Operators\r1 2 3 4 \\sum \\bigcup \\bigvee \\bigoplus \\prod \\bigcap \\bigwedge \\bigotimes \\coprod \\bigsqcup \\bigodot \\int \\oint \\biguplus Table: Arrows\r1 2 3 4 5 6 7 8 9 10 11 \\leftarrow or \\gets \\longleftarrow \\uparrow \\rightarrow or \\to \\longleftrightarrow \\downarrow \\leftrightarrow \\longleftrightarrow \\updownarrow \\Leftarrow \\Longleftarrow \\Uparrow \\Rightarrow \\Longrightarrow \\Downarrow \\Leftrightarrow \\Longleftrightarrow \\Updownarrow \\mapsto \\longmapsto \\nearrow \\hookleftarrow \\hookrightarrow \\searrow \\leftharpoonup \\rightharpoonup \\swarrow \\leftharpoondown \\rightharpoondown \\nwarrow \\rightleftharpoons \\iff \\Leadsto $^a$ Use the latexsym package to access this symbol\nTable: Delimiters\r1 2 3 4 5 6 \\lparen \\rparen \\uparrow \\Uparrow [ or \\lbrack ] or \\rbrack \\downarrow \\Downarrow \\{ or \\lbrace \\} or \\rbrace \\updownarrow \\Updownarrow \\langle \\rangle | or \\vert \\| or \\Vert \\lfloor \\rfloor \\lceil \\rceil / \\backslash Table: Miscellaneous Symbols\r1 2 3 4 5 6 7 8 \\dots \\cdots \\vdots \\ddots \\hbar \\imath \\jmath \\ell \\Re \\Im \\aleph \\wp \\forall \\exists \\mho \\partial \\nabla \\triangle \\Box \\Diamond \\bot \\top \\angle \\surd \\diamondsuit \\heartsuit \\clubsuit \\spadesuit \\neg or \\lnot \\flat \\natural \\sharp $^a$ Use the latexsym package to access this symbol\nTable: Non-Mathematical Symbols\rThese symbols can also be used in text mode.\n1 2 \\dagger \\S \\copyright \\ddag \\P \\pounds Table: AMS Delimiters\r1 \\ulcorner \\urcorner \\llcorner \\lrcorner Table: AMS Binary Relations\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \\lessdot \\gtrdot \\doteqdot or \\Doteq \\leqslant \\geqslant \\risingdotseq \\eqslantless \\eqslantgtr \\fallingdotseq \\leqq \\geqq \\eqcirc \\lll or \\llless \\ggg or \\gggtr \\circeq \\lesssim \\gtrsim \\triangleq \\lessapprox \\gtrapprox \\bumpeq \\lessgtr \\gtrless \\Bumpeq \\lesseqgtr \\gtreqless \\thicksim \\lesseqqgtr \\gtreqqless \\thickapprox \\preccurlyeq \\succcurlyeq \\approxeq \\curlyeqprec \\curlyeqsucc \\backsim \\precsim \\succsim \\backsimeq \\precapprox \\succapprox \\vDash \\subseteqq \\supseteqq \\Vdash \\Subset \\Supset \\Vvdash \\sqsubset \\sqsupset \\backepsilon \\therefore \\because \\varpropto \\shortmid \\shortparallel \\between \\smallsmile \\smallfrown \\pitchfork \\vartriangleleft \\vartriangleright \\blacktriangleleft \\trianglelefteq \\trianglerighteq \\blacktriangleright Table: AMS Arrows\r1 2 3 4 5 6 7 8 9 10 11 \\dashleftarrow \\dashrightarrow \\multimap \\leftleftarrows \\rightrightarrows \\upuparrows \\leftrightarrows \\rightleftarrows \\downdownarrows \\Lleftarrow \\Rrightarrow \\upharpoonleft \\twoheadleftarrow \\twoheadrightarrow \\upharpoonright \\leftarrowtail \\rightarrowtail \\downharpoonleft \\leftrightharpoons \\rightleftharpoons \\downharpoonright \\Lsh \\Rsh \\rightsquigarrow \\looparrowleft \\looparrowright \\leftrightsquigarrow \\curvearrowleft \\curvearrowright \\circlearrowleft \\circlearrowright Table: AMS Negated Binary Relations and Arrows\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \\nless \\ngtr \\varsubsetneqq \\lneq \\gneq \\varsupsetneqq \\nleq \\ngeq \\nsubseteqq \\nleqslant \\ngeqslant \\nsupseteq \\lneqq \\gneqq \\nmid \\lvertneqq \\gvertneqq \\nparallel \\nleqq \\ngeqq \\nshortmid \\lnsim \\gnsim \\nshortparallel \\lnapprox \\gnapprox \\nsim \\nprec \\nsucc \\ncong \\npreceq \\nsucceq \\nvdash \\precneqq \\succneqq \\nvDash \\precnsim \\succnsim \\nVdash \\precnapprox \\succnapprox \\nVDash \\subsetneq \\supsetneq \\ntriangleleft \\varsubsetneq \\varsupsetneq \\ntriangleright \\nsubseteq \\nsupseteq \\ntrianglelefteq \\subsetneqq \\supsetneqq \\ntrianglerighteq \\nleftarrow \\nrightarrow \\nleftrightarrow \\nLeftarrow \\nRightarrow \\nLeftrightarrow Table: AMS Binary Operators\r1 2 3 4 5 6 7 8 \\dotplu \\centerdot \\intercal \\ltimes \\rtimes \\divideontimes \\Cup or \\doublecup \\Cap or \\doublecap \\smallsetminus \\veebar \\barwedge \\doublebarwedge \\boxplus \\boxminus \\circleddash \\boxtimes \\boxdot \\circledcirc \\leftthreetimes \\rightthreetimes \\circledast \\curlyvee \\curlywedge Table: AMS Miscellaneous\r1 2 3 4 5 6 7 8 9 \\hbar \\hslash \\Bbbk \\square \\blacksquare \\circledS \\vartriangle \\blacktriangle \\complement \\triangledown \\blacktriangledown \\Game \\lozenge \\blacklozenge \\bigstar \\angle \\measuredangle \\sphericalangle \\diagup \\diagdown \\backprime \\nexists \\Finv \\varnothing \\eth \\mho Table: Math Alphabets\r1 2 3 4 5 6 7 8 \\mathrm{} \\mathit{} \\mathnormal{} \\mathcal{} \\mathcal{} eucal \\mathscr{} eucal \\mathfrak{} eufrak \\mathbb{} amsfonts or amssymb Reprinted with permission from LaTeX Math Symbols\n","date":"2025-02-25T11:44:28+08:00","image":"https://example.com/post_img/2025-02-25/latex-logo.png","permalink":"https://example.com/p/notes-on-latex-math-symbols/","title":"Notes on Latex Math Symbols"},{"content":"绪论\r四个基本概念\r数据：描述事物的符号记录。 数据库：概括地讲，数据库数据具有永久存储、有组织和可共享的三个基本特点。严格地讲：数据库是长期储存在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。 数据库管理系统：是位于用户和操作系统之间的一层数据管理软件。和操作系统一样是计算机的基础软件。主要功能： 数据定义功能 数据组织、存储和管理 数据操纵功能 数据库的事务管理和运行管理 数据库的建立和维护功能 其他功能（通信功能，数据转换功能，互访和互操作功能等） 数据库系统：是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DBA）组成的存储、管理、处理和维护数据的系统。 数据库的发展阶段\r人工管理阶段：数据不保存、不共享、不具有独立性。\n文件系统阶段：可保存，但共享性差，冗余度大，独立性差。\n数据库管理系统：数据库系统的出现使信息系统从以加工数据的程序为中心转向围绕共享的数据库为中心的新阶段。\n数据的共享性高、冗余度低且易扩充：数据共享可以大大减少数据冗余，节约存储空间。\n数据独立性高：\n物理独立性：是指用户的应用程序与数据库中数据的物理存储是相互独立的。 逻辑独立性：是指用户的应用程序与数据库的逻辑结构是相互独立的。 数据由数据库管理系统统一管理和控制。\n数据模型\r两类数据模型：\n概念模型：也称信息模型，它是按用户观点来对数据和信息建模，主要用于数据库设计。 基本概念：\n实体：客观存在并可相互区别的事物。e.g. 人 属性：实体所具有的某一特性。e.g. 人的鼻子 嘴巴 码：唯一标识实体的属性。e.g. 学号 实体型：用实体名及其属性集合来抽象和刻画同类实体。e.g. 含有鼻子和嘴巴的人 （实体+属性） 实体集：同一类型实体的集合。e.g. 学校 （很多实体型） 概念模型的一种表示方法：实体-联系方法。用E-R图来措述现实世界的概念模型，E-R方法也称为E-R模型。\n逻辑模型和物理模型\n逻辑模型：它是按计算机系统的观点对数据建模，主要用于数据库管理系统的实现。包括： 层次模型 网状模型 关系模型 物理模型：是对数据最底层的抽象，它描述数据在系统内部的表示方法和存取方法，或在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的。 ER图\rER图分为实体、属性和关系三个部分。实体用长方形，属性是椭圆形，关系是菱形。唯一的标识：主键。 联系：\n实体之间的联系通常是指不同实体集之间的联系。实体之间的联系有一对一、一对多和多对多等多种联系。 实体内部的联系通常是指实体各属性之间的联系。 常用的数据模型\r常用的数据模型：层次模型，网状模型，关系模型，面向对象数据模型，对象关系数据模型，半结构化数据模型。\n层次模型：\n有且只有一个结点没有双亲结点，这个结点称为根结点。 根以外的其他结点有且只有一个双亲结点。 网状模型：\n允许一个以上的结点无双亲 一个结点可以有多于一个双亲 关系模型：对应一张表\n元组：表中的一行。 属性：表中的一列。 码：也称码键，表中的某个属性组。 域：是一组具有相同数据类型的值的集合。 分量：元组中的一个属性。 数据库系统的结构\r模式数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。其一个具体值称为模式的一个实例。模式是相对稳定的，实例是相对变动的。\n三级模式结构：外模式+模式+内模式\n外模式：也称子模式或用户模式，它是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。\n模式：也称为逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。\n内模式：也称存储模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。\n二级映像： 外模式/模式映像：当模式改变时，由数据库管理员对各个外模式/模式映像作相应改变，可以使外模式保持不变。应用程序不必修改。保证了数据与程序的逻辑独立性。\n模式/内模式映像：当数据库的存储结构改变时，有数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不用改变。保证了数据与程序的物理独立性。\n数据与程序之间的独立性使得数据的定义和描述可以从应用程序中分离出去。另外，由于数据的存取由数据库管理系统管理，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。\n数据库系统的组成\r硬件平台及数据库：足够大内存、磁盘或磁盘阵列等设备，较高的通道能力以提高数据的传送率。\n软件：数据库管理系统，支持数据库管理系统运行的操作系统，具有与数据库接口的高级语言及其编译系统，以数据库管理系统为核心的应用开发工具，为特定应用环境开发的数据库应用系统。\n人员：开发、管理和使用数据库的人员主要包括数据库管理员、系统分析员和数据库设计人员、应用程序员和最终用户。\n数据库管理员职责：\n决定数据库中的信息内容和结构 决定数据库的存储结构和存取策略 定义数据的安全性要求和完整性约束条件 监控数据库的使用和运行 数据库的改进和重组、重构 关系\r可以形象地表示为 R(U, D, DOM, F)\nR:关系名 U:所有属性名 D：属性来自哪些域 DOM：属性和域的映射 F: 属性间的依赖关系 关系语言的分类\r分为关系代数语言，关系演算语言和SQL语言。\n关系代数语言：一种抽象的查询语言，它用对关系的运算来表达查询。\n三大要素：运算对象（关系）、运算符（集合运算符和专门的关系运算符）和运算结果（关系）\nR $\\cap$ S：交 (union)：结果由既属于R又属于S的元组组成。\nR $\\cup$ S：并 (intersection)：结果由属于R和属于S的所有元组组成。\nR $-$ S：差 (difference)：结果由属于R而不属于S的所有元组组成。\nR $\\times$ S：笛卡尔积 (product)：\n将 R 中的每个元组 $t_1$ 和 S 中的每个元组 $t_2$ 配对连接 列数：$n+m$ 前 $n$ 列是关系 R 的一个元组 $t_1$ 后 $m$ 列是关系 S 的一个元组 $t_2$ 行数：$k_1 \\times k_2$ 当 R 和 S 中有重名属性 A 时，则采用 R.A 和 S.A 分别命名对应的属性列 $\\sigma_C$(R)：选择 (selection)：\n用于在关系R中选择满足给定条件的各个元组\nC：选择条件，是一个逻辑表达式\n结果为只包含R中某些元组的新的关系\n一些运算符：\n比较运算符\n$\u0026gt;$：大于 $\\ge$：大于等于 $\u0026lt;$：小于 $\\le$：小于等于 $=$：等于 \u0026lt;\u0026gt;：不等于 逻辑运算符\n$\\neg$：非 $\\wedge$：与 $\\vee$：或 $\\Pi_L$(R)：投影 (projection)\n用于从R中选择出若干属性列组成新的关系(默认去重) L为R中的属性列表 结果为只包含R中某些列的新的关系 结果要去掉重复元组 R $\\Join$ S：连接 (Join)\nA $\\theta$ B： A 和 B：分别为 R 和 S 上度数相等且可比的属性组 $\\theta$：比较运算符 等值连接：$\\theta$ 为 $=$ 的连接运算称为等值连接 从关系 R 与 S 的笛卡尔积中选取A、B属性值相等的那些元组 自然连接是在公共属性（组）上进行的等值连接 两个关系中必须具有公共属性（组） 在结果中把重复的属性列去掉 悬浮元组(Dangling tuple)：两个关系 R 和 S 在做自然连接时，关系 R 中某些元组有可能在 S 中不存在公共属性上值相等的元组，从而造成 R 中这些元组在操作时被舍弃了，这些被舍弃的元组称为悬浮元组。 外连接(Outer Join)：如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(Null)，就叫做外连接。 左外连接(Left Outer Join或Left Join)：只保留左边关系 R 中的悬浮元组 右外连接(Right Outer Join或Right Join)：只保留右边关系 S 中的悬浮元组 R $\\div$ S：保留 R 中满足 S 的，而且 R 中的列去掉 S 的列。 关系的完整性\r实体完整性(Entity Integrity)：主码唯一且非空 参照完整性(Referential Integrity)：外码要么为空，要么对应另一表的主码。 外码：外码是一个关系中的属性。例如，如果关系R1中的属性X是关系R2的主码，那么X就是R1的外码。 用户定义完整性(User-defined Integrity)：是针对特定应用领域定义的数据约束条件。它包括字段的值域、数据类型和有效性规则等。这些约束条件反映了特定应用所涉及的数据必须满足的应用语义要求，例如，一个年龄字段可能被限制只能包含正整数。 SQL\rSQL基本概念\rSQL是Structured Query Language的缩写，意思是结构化查询语言，是一种在数据库管理系统中查询或对数据库里面的数据进行更改的语言。\n常见的数据库管理系统：\n关系型： MySQL , Oracle , PostgreSQL , Mycrosoft SQL Server 非关系型： Redis , MongoDB SQL语言分类\r数据定义语言DDL (Data Ddefinition Language): SQL数据定义语言主要用来定义逻辑结构，包括定义基表，视图和索引。删除表，定义表，修改表。 数据查询语言DQL (Data Query Language): SQL的数据查询语言主要用来对数据库中的各种数据对象进行查询。 数据操纵语言DML (Data Manipulation Language): SQL的数据操纵语言，用于改变数据库中的数据，包括插入，删除，修改 数据控制功能DCL (Data Control Language): SQL的数据控制语言，对表和视图的授权，完整性规则的描述以及事务开始和结束等控制语句。 SQL语言特点\r1.综合统一（独立完成数据库生命周期中的全部活动，包括定义关系模式、录入数据、建立数据库、查询、更新、维护、数据库重构、数据库安全） 2.高度非过程化（用户只需提出\u0026quot;做什么\u0026quot;，而不必指明\u0026quot;怎么做\u0026quot;。） 3.面向集合的操作方式（SQL采用集合操作方式） 4.以同一种语法结构提供两种使用方式（SQL既是自含式语言，又是嵌入式语言。SQL语句能够嵌入到高级语言程序中） 5.语言简洁，易学易用（SQL语言语法简单，接近英语口语，因此容易学习也容易使用。）\n数据类型及含义\rCHAR($n$), CHARACTER($n$)：长度为n的定长字符串 VARCHAR($n$), CHARACTERVARYING($n$)：最大长度为n的变长字符串 CLOB：字符串大对象 BLOB：二进制大对象 INT, INTEGER：长整数（4字节） SMALLINT：短整数（2字节） BIGINT：大整数（8字节） NUMERIC($p,d$)：定点数，由一共 $p$ 位数字（不包括符号、小数点）组成，小数点后面有 $d$ 位数字 （整数位有 $p - d$ 位数字） DECIMAL($p,d$), DEC(p, d)：同NUMERIC （MySQL） REAL：取决于机器精度的单精度浮点数 DOUBLE PRECISION： 取决于机器精度的双精度浮点数 FLOAT($n$)： 可选精度的浮点数，精度至少为n位数字 BOOLEAN：逻辑布尔量 DATE：日期，包含年、月、日，格式为YYYY-MM-DD TIME：时间，包含一日的时、分、秒，格式为HH:MM:SS TIMESTAMP：时间戳类型 INTERVAL：时间间隔类型 模式定义\r1 create SCHEMA \u0026lt;模式名\u0026gt; AUTHORIZATION \u0026lt;模式名\u0026gt; e.g. 为用户 WANG 定义一个 学生-课程 模式 S-T。\n1 create SCHEMA \u0026#34;S-T\u0026#34; AUTHORIZATION WANG; 模式删除\r1 drop SCHEMA 模式名 CASCADE/RESTRICT 删除模式，其中CASCADE和RESTRICT必须二选一\nCASCADE（级联）：删除模式的同时也把该模式的所有数据库对象删除。 RESTRICT（限制）：如果该模式下有下属对象，就拒绝这个删除语句的执行。 表的定义删除修改\r定义\r1 create table 表名 (字段名 类型 字段约束, 字段名 类型 字段约束, 字段名 类型 字段约束); e.g.\n1 create table user (name varchar(20), age int, sex char(1)); 删除\r1 drop table 表名 CASCADE/RESTRICT; CASCADE: 如果表有外键，视图，触发器的话也会强行删除。 RESTRICT: 如果表有外键，视图，触发器的话不会删除。 修改\r1 2 alter table 表名 ADD 新列名 数据类型 [完整性约束]; alter table 表名 ADD [表级完整性约束]; e.g. 向Student表增加\u0026quot;入学时间\u0026quot;列，其数据类型为日期型。\n1 alter table Student ADD S_entrance DATE; e.g. 将Student表中年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。\n1 alter table Student ALTER COLUMN Sage INT; 索引的定义删除修改\r数据量大的时候，查询耗时长，定义索引可以有效减少消耗时间，索引可以建立在一列或多列上，索引是独一无二的。\n定义\r1 create UNIQUE/CLUSTER INDEX 索引名 ON 表名(列名，列名，...); UNIQUE: 唯一索引 CLUSTER: 聚簇索引：物理顺序与索引顺序相同 e.g.\n1 create UNIQUE INDEX Stusno ON Student(Sno); 修改\r1 alter INDEX 旧索引名 RENAME TO 新索引名; e.g.\n1 alter INDEX SCno RENAME TO SCSno; 删除\r1 drop INDEX 索引名; e.g.\n1 drop INDEX Stusname; 查询\r查询所有\r1 select * from 表名; 查询部分+起别名\r1 select 列名1 (as) 别名1,列名2 (as) 别名2,... from 表名 (as) 别名; -- as 可以省略 假设起别名的时候别名有空格：select a b c from 表名;\n不符合语法，会编译报错。 解决方案：select a 'b c' from 表名; 或者 select a \u0026quot;b c\u0026quot; from 表名; 查询结果去重\rdistinct关键词\n1 select distinct 列名1 from 表名; 查询结果加条件\r查询符号：\n比较：=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;=, != (\u0026lt;\u0026gt;), not+上述比较运算符 1 2 3 select a from 表名 where b = 1; select a from 表名 where b \u0026lt;\u0026gt; 1; --(select a from 表名 where b != 1;) select a from 表名 where b \u0026lt; 1; 确定范围：BETWEEN a AND b, NOT BETWEEN a AND b. 1 select a from 表名 where b between 1 and 2; 确定集合（不是区间，是列表/集合，相当于多个or连接）：IN, NOT IN 1 - select a from 表名 where b in(1,2); 字符匹配（模糊查询，支持%（匹配任意个字符）和下划线（一个下划线只匹配一个字符）匹配）：LIKE, NOT LIKE 1 2 3 4 5 6 select a from 表名 where a like \u0026#39;%o%\u0026#39; -- a中有o的 select a from 表名 where a like \u0026#39;%M\u0026#39; -- a中以M结尾的 select a from 表名 where a like \u0026#39;K%\u0026#39; -- a中以K开始的 select a from 表名 where a like \u0026#39;_T%\u0026#39; -- a中第二个字母是T的 select a from 表名 where a like \u0026#39;__R%\u0026#39; -- a中第三个字母是R的 select a from 表名 where a like \u0026#39;%\\_%\u0026#39; -- a中有_的 (\\是转义字符) 空值（判断是否为null）：IS NULL, IS NOT NULL 1 select a from 表名 where b is null; 多重条件（逻辑运算）：AND, OR, NOT （优先级 not \u0026gt; and \u0026gt; or） 1 2 select a from 表名 where b \u0026lt; 1 and c = 2; select a from 表名 where b \u0026lt; 1 or c = 2; 排序\r默认升序\n1 select a from 表名 order by c; 降序 1 select a from 表名 order by c desc; 升序 1 select a from 表名 order by c asc; 两个字段排序或者多个字段排序： 1 select a from 表名 order by c asc, d asc; -- c在前起主导，只有c相同时考虑比较d 按照字段的位置进行排序： 1 select a from 表名 order by 2; -- 2表示第二列，按照查询结果的第二列排序 单行处理函数\r特点：一个输入对应一个输出。\nlower 转换小写： 1 select lower(a) from 表名; upper 转换大写： 1 select upper(a) from 表名; substr 取子字符串（起始下标从1开始）： 1 select substr(a,1,3) from 表名; -- substr(被截取的字符串，起始下标，截取长度) e.g. 找a中以字母A开头的： 1 2 select a from 表名 where a like \u0026#39;A%\u0026#39;; select a from 表名 where substr(a,1,1) = \u0026#39;A\u0026#39;; concat 字符串拼接： 1 select concat(a,b) from 表名; length 字符串长度： 1 select length(a) from 表名; trim 去空格： 1 2 select a from 表名 where a = trim(\u0026#39; K\u0026#39;); select a from 表名 where a = \u0026#39;K\u0026#39;; -- same as above 多行处理函数\r特点：多个输入对应一个输出。\ncount 计数： 1 select count(a) from 表名; -- 计算 a 这个字段中不为空的元素总数。 sum 求和： 1 select sum(a) from 表名; avg 平均： 1 select avg(a) from 表名; max 最大值： 1 select max(a) from 表名; min 最小值： 1 select min(a) from 表名; 注意\r分组函数在使用的时候必须先分组，然后才能用。如果没有对数据进行分组，整张表默认为一组。 分组函数自动忽略null，不需要提前对null进行处理 count(*)和count(a)的区别：count(*)是统计表当中的总行数，只要有一行数据就count++，count(a)是统计a字段下不为null的元素总数。 分组函数不能直接使用在where子句中 所有分组函数可以组合起来一起用： 1 select min(a),max(a),count(a) from 表名; 分组查询\r实际应用中可能需要先进行分组，然后对每一组的数据进行操作：\n1 select a from 表名 group by c 分组函数不能直接使用在where子句中：因为分组函数必须先分组再使用，where执行的时候还没有分组，所以where后面不能出现分组函数。\n在一条select语句中，如果有group by语句的话，select后面只能跟参加分组的字段和分组函数。\n两个字段联合分组\re.g. 找出每个部门不同工作岗位的最高薪资：\n1 select department,job,max(sal) from 表名 group by department,job 技巧：把两个字段联合成一个字段看\ne.g. 找出每个部门最高薪资，要求显示最高薪资大于3000：\n1 2 select department,max(sal) from 表名 group by department having max(sal) \u0026gt; 3000 --先分组再筛选 select department,max(sal) from 表名 where sal \u0026gt; 3000 group by department --先筛选再分组 策略：where和having，优先选择where，where完成不了选择having。where完成不了的情况：显示平均薪资大于2500。 单表查询总结\r关键字执行顺序：from → where → group by → having → select → order by 从某张表中查询数据，先经过where条件筛选出有价值的数据，对这些有价值的数据进行分组，分组之后可以使用having继续筛选，select查询出来。 ","date":"2025-02-24T19:06:28+08:00","permalink":"https://example.com/p/notes-on-database/","title":"Notes on DataBase"},{"content":"缘起\r很多网站，尤其是国外网站，为了加快网站的速度，都使用了 Google 的 CDN。但是在天朝，由于某些原因，导致全球最快的 CDN 变成了全球最慢的。\n替换\r序号 原地址 替换后的地址 简述 1 ajax.googleapis.com ajax.loli.net 前端公共库 2 fonts.googleapis.com fonts.googleapis.cn 免费字体库 3 themes.googleusercontent.com themes.loli.net fonts 资源引用 4 fonts.gstatic.com fonts.googleapis.cn 免费字体库 5 www.google.com/recaptcha www.recaptcha.net/recaptcha Google 图像验证库 6 secure.gravatar.com gravatar.loli.net gravatar 头像 7 maxcdn.bootstrapcdn.com/bootstrap lib.baomitu.com/twitter-bootstrap/ bootstrap 框架使用的 CDN 8 code.jquery.com/jquery-(version)(suffix) https://fastly.jsdelivr.net/npm/jquery@$verson/dist/jquery$suffix jquery 框架使用的 CDN 9 cdnjs.cloudflare.com cdnjs.loli.net - 10 cdn.jsdelivr.net fastly.jsdelivr.net - 11 developers.google.com developers.google.cn - 12 developer.android.com developer.android.google.cn - 13 source.android.com source.android.google.cn - 14 www.gstatic.com www.gstatic.cn - 15 cdn.sstatic.net sstatic.net - License\r原作者：ReplaceGoogleCDN\n","date":"2025-02-21T21:58:39+08:00","permalink":"https://example.com/p/replace-google-cdn/","title":"Replace Google CDN"},{"content":"Introduction\rA GitHub personal home page, officially called a profile, is a personal GitHub presentation master page written in Markdown. In this article, we\u0026rsquo;ll demonstrate how to add a funny snake animation to the GitHub profile page.\nThe Snake animation is actually a kind of “heat map”, each small grid corresponds to each day, the grid is gray by default, where the green grid means we submitted code on that day, the darker the color of the grid, the more times we committed code on that day.\nPre-Conditions\rGitHub Accounts Some GitHub commits Implementation Steps\rStep 1: Create the Repository\rCreate a new repository with the same name as your GitHub username and select Add a README file.\nFor example, I would create a serendipityerr repository. After filling in the repository name (same as your GitHub username), some information would pop up like:\n1 serendipityerr/serendipityerr is a ✨️special✨️ repository that you can use to add a README.md to your GitHub profile. Make sure it\u0026#39;s public and initialize it with a README to get started. Step 2: New Action and Workflow\rClick on Actions in the repository you just created to enter the website like https://github.com/serendipityerr/serendipityerr/actions.\nClick on New workflow in the left side and select Skip this and set up a workflow yourself .\nIn the main.yml, copy and paste the following codes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 name: generate animation on: # run automatically every 24 hours schedule: - cron: \u0026#34;0 */24 * * *\u0026#34; # allows to manually run the job at any time workflow_dispatch: # run on every push on the master branch push: branches: - main jobs: generate: runs-on: ubuntu-latest timeout-minutes: 10 steps: # generates a snake game from a github user (\u0026lt;github_user_name\u0026gt;) contributions graph, output a svg animation at \u0026lt;svg_out_path\u0026gt; - name: generate github-contribution-grid-snake.svg uses: Platane/snk/svg-only@v3 with: github_user_name: ${{ github.repository_owner }} outputs: | dist/github-contribution-grid-snake.svg dist/github-contribution-grid-snake-dark.svg?palette=github-dark env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # push the content of \u0026lt;build_dir\u0026gt; to a branch # the content will be available at https://raw.githubusercontent.com/\u0026lt;github_user\u0026gt;/\u0026lt;repository\u0026gt;/\u0026lt;target_branch\u0026gt;/\u0026lt;file\u0026gt; , or as github page - name: push github-contribution-grid-snake.svg to the output branch uses: crazy-max/ghaction-github-pages@v3.1.0 with: target_branch: output build_dir: dist env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} Click on Commit changes...\nClick on Run workflow\nCheck whether successfully pushed, if successful, turn on Step 3. If not successful, turn to Debug part.\nStep 3: Revise README.md to Demonstrate the Action\rAdd the following codes in the README.md and please DO NOT FORGET to change the serendipityerr to your GitHub username:\n1 2 3 4 5 \u0026lt;picture\u0026gt; \u0026lt;source media=\u0026#34;(prefers-color-scheme: dark)\u0026#34; srcset=\u0026#34;https://raw.githubusercontent.com/serendipityerr/serendipityerr/output/github-contribution-grid-snake-dark.svg\u0026#34;\u0026gt; \u0026lt;source media=\u0026#34;(prefers-color-scheme: light)\u0026#34; srcset=\u0026#34;https://raw.githubusercontent.com/serendipityerr/serendipityerr/output/github-contribution-grid-snake.svg\u0026#34;\u0026gt; \u0026lt;img alt=\u0026#34;github contribution grid snake animation\u0026#34; src=\u0026#34;https://raw.githubusercontent.com/serendipityerr/serendipityerr/output/github-contribution-grid-snake.svg\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; Preview the changes to check if successfully deployed and Click on Commit changes....\nDebugging for the Potential Problems\rFailed to commit the main.yml in the workflow.\rWhen I attempted to commit the main.yml in the workflow, I found error All checks have failed. 1 failing check. In detail:\n1 2 3 4 5 Pushing dist directory to output branch on serendipityerr/serendipityerr repo /usr/bin/git push --force ***github.com/serendipityerr/serendipityerr.git output remote: Permission to serendipityerr/serendipityerr.git denied to github-actions[bot]. fatal: unable to access \u0026#39;https://github.com/serendipityerr/serendipityerr.git/\u0026#39;: The requested URL returned error: 403 Error: The process \u0026#39;/usr/bin/git\u0026#39; failed with exit code 128 Solutions\nSetup GitHub personal access: Actions deployed require access to your repository.\nClick on your avatar in the upper right corner\n→ Settings\n→ Developer settings\n→ Personal access tokens\n→ Tokens (classic)\n→ New personal access token or Click on the existing token\n→ Select all the scopes and choose No expiration\n→ Remember the TOKEN (it can\u0026rsquo;t be viewed after the page is closed!!!!)\n→ Go back to the repository, click on Setting - Secrets - Actions - New repository secrets. Name is ACCESS_TOKEN and Value is the TOKEN you just got.\nRevise the main.yml and Add two lines of codes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 name: generate animation permissions: contents: write on: # run automatically every 24 hours schedule: - cron: \u0026#34;0 */24 * * *\u0026#34; # allows to manually run the job at any time workflow_dispatch: # run on every push on the master branch push: branches: - main jobs: generate: runs-on: ubuntu-latest timeout-minutes: 10 steps: # generates a snake game from a github user (\u0026lt;github_user_name\u0026gt;) contributions graph, output a svg animation at \u0026lt;svg_out_path\u0026gt; - name: generate github-contribution-grid-snake.svg uses: Platane/snk/svg-only@v3 with: github_user_name: ${{ github.repository_owner }} outputs: | dist/github-contribution-grid-snake.svg dist/github-contribution-grid-snake-dark.svg?palette=github-dark env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # push the content of \u0026lt;build_dir\u0026gt; to a branch # the content will be available at https://raw.githubusercontent.com/\u0026lt;github_user\u0026gt;/\u0026lt;repository\u0026gt;/\u0026lt;target_branch\u0026gt;/\u0026lt;file\u0026gt; , or as github page - name: push github-contribution-grid-snake.svg to the output branch uses: crazy-max/ghaction-github-pages@v3.1.0 with: target_branch: output build_dir: dist env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} Turn on Step 2 and the problem is solved.\nFinal Animated Demo\rThe final results of my GitHub profile page can be found here: https://github.com/serendipityerr. ","date":"2025-02-20T11:14:33+08:00","image":"https://raw.githubusercontent.com/serendipityerr/serendipityerr/output/github-contribution-grid-snake.svg","permalink":"https://example.com/p/add-a-funny-snake-animation-to-your-github-profile-page/","title":"Add a Funny Snake Animation to Your GitHub Profile Page"},{"content":"HTML入门\rHTML(Hyper Text Markup Language)：超文本标记语言，用来描述网页的语言。\nHTML不是编程语言，是标记语言。\n所谓超文本，有2层含义：\n可以加入图片、声音动画、多媒体等内容(超越了文本限制)。 还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接(超级链接文本)。 浏览器内核（渲染引擎）：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。\nWeb标准的构成\r主要包括结构(Structure)、表现(Presentation)和行为(Behavior)三个方面。\n结构：结构用于对网页元素进行整理和分类，现阶段主要学的是HTML。 表现：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是css。 行为：行为是指网页模型的定义及交互的编写，现阶段主要学的是Javascript Web标准提出的最佳体验方案：结构、样式、行为相分离。 结构写到HTML文件中，表现写到css文件中，行为写到JavaScript文件中。 语法\r标签关系\r并列：\n1 2 3 4 \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; 包含：\n1 2 3 \u0026lt;head\u0026gt; \u0026lt;title\u0026gt; \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; 基本结构\r每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。\nHTML标签：页面中最大的标签，我们称为根标签。 1 \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; 文档的头部：注意在head标签中我们必须要设置的标签是title。 1 \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; 文档的标题：让页面拥有一个属于自己的网页标题。 1 \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; 文档的主体：元素包含文档的所有内容，页面内容基本都是放到body里面的。 1 \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;!DOCTYPE\u0026gt;标签：文档类型声明，告诉浏览器用哪种HTML版本来显示网页。\nNotice：\n\u0026lt;!DOCTYPE\u0026gt;声明位于文档中的最前面的位置，处于\u0026lt;html\u0026gt;标签之前。 \u0026lt;!DOCTYPE\u0026gt;不是一个HTML标签。 lang 语言种类：用来定义当前文档显示的语言。\ne.g. English 1 \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\u0026lt;/html\u0026gt; e.g. Chinese 1 \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt;\u0026lt;/html\u0026gt; 其实对于文档显示来说，定义成en的文档也可以显示中文，定义成zh-CN的文档也可以显示英文。\n这个属性对浏览器和搜索引擎是有作用的，可以要求翻译。\ncharset 字符集：字符集(Character set)是多个字符的集合，以便计算机能够识别和存储各种文字。\n在\u0026lt;head\u0026gt;标签内，可以通过\u0026lt;meta\u0026gt;标签的charset属性来规定HTML文档应该使用哪种字符编码。\n1 \u0026lt;meta charset=\u0026#34; UTF-8\u0026#34; /\u0026gt; charset常用的值有： GB2312、BIG5、GBK和UTF-8，其中UTF-8也被称为万国码，基本包含了全世界所有国家需要用到的字符。\n语义标签：根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。\n标题标签：HTML提供了6个等级的网页标题：\u0026lt;h1\u0026gt;,\u0026lt;h2\u0026gt;,\u0026lt;h3\u0026gt;,\u0026lt;h4\u0026gt;,\u0026lt;h5\u0026gt;,\u0026lt;h6\u0026gt;。h是head的缩写，意为头部、标题。\n1 \u0026lt;h1\u0026gt;一级标题\u0026lt;/h1\u0026gt; 作为标题使用，依据重要性递减：一级\u0026gt;二级\u0026gt;\u0026hellip;\n特点：\n加了标题的文字会变的加粗，字号也会依次变大。 一个标题独占一行。 段落标签：在HTML标签中，\u0026lt;p\u0026gt;标签用于定义段落，它可以将整个网页分为若干个段落。p是paragraph的缩写，意为段落。\n1 \u0026lt;p\u0026gt;段落\u0026lt;/p\u0026gt; 特点：\n文本在一个段落中会根据浏览器窗口的大小自动换行。 段落和段落之间保有空隙。 换行标签：在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签\u0026lt;br/\u0026gt;。br是break的缩写，意为打断、换行。\n1 \u0026lt;p\u0026gt;aaaa\u0026lt;br /\u0026gt;aaaaaaa\u0026lt;/p\u0026gt; 特点：\n\u0026lt;br/\u0026gt;是个单标签。 \u0026lt;br/\u0026gt;标签只是简单地开始新的一行，跟段落不一样段落之间会插入一些垂直的间距。 综合案例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;水花61分伊戈达拉制胜抢断 西决勇士再胜开拓者总分2-0\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;数据统计：水花兄弟合砍61分\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;库里22投11中，三分14投4中，罚球11罚全中得到37分8篮板8助攻，职业生涯季后赛得分30+次数来到35次，超过哈登 排名现役第3位，仅次于詹姆斯和杜兰特。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;汤普森22投8中，三分8投4中得到24分3篮板2助攻，德拉蒙德格林得到16分10篮板7助攻5盖帽，凯文-鲁尼得到14分7 篮板2助攻，今天勇士有7名替补出场。\u0026lt;/p\u0026gt; \u0026lt;h4\u0026gt;兄弟对决升级：小库里给哥哥造成压力\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;库里兄弟是NBA历史上第一对在分区决赛相遇的兄弟。 在西决第1场中，小库里没有给哥哥造成压力，他出场19分钟， 7 投1中只得到3分3篮板2助攻，在场期间输掉10分。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;但在西决第2场中，小库里攻防两端都打出杰出的表现[全场送出4次抢断，包括直接抢断自己的哥哥库里，在防守端给 库里造成了极大的困扰。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;作者：\u0026lt;br /\u0026gt;2019-8-8\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 文本格式化标签：粗体、斜体、删除线、下划线。突出重要性，比普通文字重要。\n加粗：\u0026lt;strong\u0026gt;\u0026lt;/strong\u0026gt;或者\u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;。更推荐使用\u0026lt;strong\u0026gt;标签加粗语义更强烈。\n倾斜：\u0026lt;em\u0026gt;\u0026lt;/em\u0026gt;或者\u0026lt;i\u0026gt;\u0026lt;/i\u0026gt;。更推荐使用\u0026lt;em\u0026gt;标签加粗语义更强烈。\n删除线：\u0026lt;del\u0026gt;\u0026lt;/del\u0026gt;或者\u0026lt;s\u0026gt;\u0026lt;/s\u0026gt;。更推荐使用\u0026lt;del\u0026gt;标签加粗语义更强烈。\n下划线：\u0026lt;ins\u0026gt;\u0026lt;/ins\u0026gt;或者\u0026lt;u\u0026gt;\u0026lt;/u\u0026gt;。更推荐使用\u0026lt;ins\u0026gt;标签加粗语义更强烈。\n\u0026lt;div\u0026gt;和\u0026lt;span\u0026gt;标签：无语义，是一个盒子，用来装内容。\n特点： \u0026lt;div\u0026gt;标签用来布局，但是现在一行只能放一个\u0026lt;div\u0026gt;。 大盒子 \u0026lt;span\u0026gt;标签用来布局，一行上可以多个\u0026lt;span\u0026gt;。小盒子 1 2 \u0026lt;div\u0026gt;content\u0026lt;/div\u0026gt; \u0026lt;span\u0026gt;content\u0026lt;/span\u0026gt; 图像标签：在HTML标签中，\u0026lt;img\u0026gt;标签用于定义HTML页面中的图像。\n1 \u0026lt;img src=\u0026#34;图像URL\u0026#34; /\u0026gt; src是图像标签的必须属性，用于指定图像文件的路径和文件名。\n图像属性：\nsrc：图片路径。必须属性。指定图像文件的路径和文件名。 alt：文本。替换文本：图像不能显示的时候显示的文字。 title：文本。提示文本：鼠标放到图像上显示的文字。 width：像素。设置图像的宽度。 height：像素。设置图像的高度。 border：像素。设置图像的边框粗细。 特点：\n图像标签可以拥有多个属性，必须写在标签名的后面。 属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。 属性采取键值对的格式，即key=\u0026quot;value\u0026quot;的格式。 超链接标签：\u0026lt;a\u0026gt;标签用于定义超链接，作用是从一个页面链接到另一个页面。a为anchor的缩写。\n链接的语法格式\n1 \u0026lt;a href=\u0026#34;跳转目标\u0026#34; target=\u0026#34;目标窗口的弹出方式\u0026#34;\u0026gt; 文本或图像 \u0026lt;/a\u0026gt; href(必须属性)：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。 target：用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中打开方式。 链接的分类\n外部链接 e.g.\n1 \u0026lt;a href=\u0026#34;http://www.baidu.com\u0026#34;\u0026gt; baidu \u0026lt;/a\u0026gt; 内部链接 e.g.\n1 \u0026lt;a href=\u0026#34;index.html\u0026#34;\u0026gt; baidu \u0026lt;/a\u0026gt; 空链接 e.g.\n1 \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt; baidu \u0026lt;/a\u0026gt; 下载链接：如果href里面地址是一个文件或者压缩包(.exe or .zip)，会下载这个文件。 e.g.\n1 \u0026lt;a href=\u0026#34;xxx.zip\u0026#34;\u0026gt; baidu \u0026lt;/a\u0026gt; 网页元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接。 e.g.\n1 \u0026lt;a href=\u0026#34;http://www.baidu.com\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;img.jpg\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; 锚点链接：点击后快速定位到页面中的某个位置\n在链接文本的href属性中，设置属性值为#name的形式，e.g. 1 \u0026lt;a href= \u0026#34;#two\u0026#34;\u0026gt;第2集\u0026lt;/a\u0026gt; 找到目标位置标签，里面添加一个id属性=刚才的name，e.g.```html 第2集介绍 ``` 注释和特殊字符\n注释：注释以\u0026lt;!--开头，以--\u0026gt;结束。\n快捷键：Ctrl + / 特殊字符\n表格标签\n基本语法\n1 2 3 4 5 6 7 \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt; ... \u0026lt;/tr\u0026gt; ... \u0026lt;/table\u0026gt; \u0026lt;table\u0026gt; \u0026lt;/table\u0026gt;是用于定义表格的标签。 \u0026lt;tr\u0026gt; \u0026lt;/tr\u0026gt;标签用于定义表格中的行，必须嵌套在\u0026lt;table\u0026gt; \u0026lt;/table\u0026gt;标签中。 \u0026lt;td\u0026gt; \u0026lt;/td\u0026gt;用于定义表格中的单元格，必须嵌套在\u0026lt;tr\u0026gt; \u0026lt;/tr\u0026gt;标签中。td为table data缩写，指单元格内容。 表头单元格标签：一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示。th为table head缩写。\n1 2 3 4 5 6 7 \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt; \u0026lt;/th\u0026gt; ... \u0026lt;/tr\u0026gt; ... \u0026lt;/table\u0026gt; 表格相关属性：一般通过css来设置。\nalign：left、center、right。规定表格相对周围元素的对齐方式。 border：1或\u0026quot;\u0026quot;。规定表格单元是否拥有边框，默认为\u0026quot;\u0026quot;，表示没有边框 cellpadding：像素值。规定单元边沿与其内容之间的空白，默认1像素。 cellspacing：像素值。规定单元格之间的空白，默认2像素。 width：像素值或百分比。规定表格的宽度。 表格结构标签：在表格标签中分别用： \u0026lt;thead\u0026gt;标签表格的头部区域、\u0026lt;tbody\u0026gt;标签表格的主体区域这样可以更好的分清表格结构。\n\u0026lt;thead\u0026gt; \u0026lt;/thead\u0026gt;：用于定义表格的头部。\u0026lt;thead\u0026gt; 内部必须拥有\u0026lt;tr\u0026gt;标签。一般是位于第一行。 \u0026lt;tbody\u0026gt; \u0026lt;/tbody\u0026gt;：用于定义表格的主体，主要用于放数据本体。 \u0026lt;thead\u0026gt; \u0026lt;/thead\u0026gt;和\u0026lt;tbody\u0026gt; \u0026lt;/tbody\u0026gt;都放在\u0026lt;table\u0026gt; \u0026lt;/table\u0026gt;内。 合并单元格\n合并单元格方式： 跨行合并：rowspan=\u0026quot;合并单元格个数\u0026quot;。最上侧单元格为目标单元格，在此单元格中写合并代码。 跨列合并：colspan=\u0026quot;合并单元格个数\u0026quot;。最左侧单元格为目标单元格，在此单元格中写合并代码。 操作步骤： 确定跨行还是跨列 找到目标单元格，加入属性合并方式=\u0026quot;合并单元格个数\u0026quot; 删除多余的单元格。 列表标签：用来布局，整齐整洁有序，可分三类：无序列表、有序列表、自定义列表。\n无序列表：\u0026lt;ul\u0026gt;标签表示HTML页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用\u0026lt;li\u0026gt;标签定义。无序列表的基本语法格式如下：\n1 2 3 4 5 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;列表项1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表项2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表项3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 无序列表的各个列表项之间没有顺序级别之分，并列的。 \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;只能嵌套\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;，直接在\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;标签中输入其他标签或者文字的做法也是不被允许的。 \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;相当于一个容器，里面可以容纳所有元素，放所有的标签。 无序列表会带有自己的样式属性，但在实际使用时，我们会使用css来设置。 有序列表：\u0026lt;ol\u0026gt;标签表示HTML页面中项目的有序列表，列表排序以数字来显示，并且使用\u0026lt;li\u0026gt;标签定义列表项。有序列表的基本语法格式如下：\n1 2 3 4 5 \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;列表项1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表项2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;列表项3\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt;中只能嵌套\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;，直接在\u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt;标签中输入其他标签或者文字的做法是不被允许的。 \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;相当于一个容器，可以容纳所有元素，放所有的标签。 有序列表会带有自己的样式属性，但在实际使用时，我们会使用css来设置。` 自定义列表：自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。在HTML标签中，\u0026lt;dl\u0026gt;标签用于定义描述列表(或定义列表)，该标签会与\u0026lt;dt\u0026gt; (定义项目/名字)和\u0026lt;dd\u0026gt;(描述每一个项目/名字)一起使用。其基本语法如下：\n1 2 3 4 5 \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;名词1\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;名词1解释1\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;名词1解释2\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;dl\u0026gt;\u0026lt;/dl\u0026gt;中只能嵌套\u0026lt;dt\u0026gt;\u0026lt;/dt\u0026gt;和\u0026lt;dd\u0026gt;\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;\u0026lt;/dt\u0026gt;和\u0026lt;dd\u0026gt;\u0026lt;/dd\u0026gt;个数没有限制，通常一个\u0026lt;dt\u0026gt;对应多个\u0026lt;dd\u0026gt;。 \u0026lt;dt\u0026gt;和\u0026lt;dd\u0026gt;里可以容纳所有元素，放所有的标签。 表单标签：用于和用户交互，收集用户信息、用户资料。一个完整的表单由表单域、表单控件和提示信息组成。\n表单域；包含表单元素的区域。\u0026lt;form\u0026gt;标签用于定义表单域\u0026lt;form\u0026gt;会把它范围内的表单元素信息提交给服务器。\n1 2 3 \u0026lt;form action=\u0026#34;url地址\u0026#34; method=\u0026#34;提交方式\u0026#34; name=\u0026#34;表单域名称\u0026#34;\u0026gt; 各种表单元素控件 \u0026lt;/form\u0026gt; 属性 action：用于指定接收并处理表单数据的服务器程序的url地址。 method：用于设置表单数据的提交方式，其取值为get或post。 name：用于指定表单的名称，以区分同一个页面中的多个表单域。 表单元素：允许用户在表单中输入或者选择的内容控件。\ninput输入表单元素：\u0026lt;input\u0026gt;标签用于收集用户信息。在\u0026lt;input\u0026gt;标签中，包含一个type属性，根据不同的type属性值，输入字段拥有很多种形式(可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等)。\u0026lt;input /\u0026gt;是单标签。\n1 \u0026lt;input type=\u0026#34;属性值\u0026#34; /\u0026gt; type属性值：\nbutton：定义可点击按钮(多数情况下，用于通过JavaScript启动脚本)，不提交表单域中的数据。 checkbox：定义复选框。 file：定义输入字段和“浏览”按钮，供文件上传。 hidden：定义隐藏的输入字段。 image：定义图像形式的提交按钮。 password：定义密码字段。该字段中的字符被掩码。 radio：定义单选按钮。 reset：定义重置按钮。重置按钮会清除表单中的所有数据，回到默认状态。 submit：定义提交按钮。提交按钮会把表单域中所有表单数据发送到服务器。 text：定义单行的输入字段，用户可在其中输入文本。默认宽度为20个字符。 name属性：定义input元素的名称。name和value是每个表单元素都有的属性值，主要给后台人员使用。name是表单元素的名字，要求单选按钮和复选框要有相同的name值（radio（或者checkbox）如果是一组，我们必须给他们命名相同的名字）。\nvalue属性：规定input元素的值。name和value是每个表单元素都有的属性值，主要给后台人员使用。可以默认显示信息。\nchecked属性：checked=\u0026quot;checked\u0026quot;，规定此input元素首次加载时应当被选中。checked属性主要针对单选按钮和复选框，主要作用是一打开界面，就默认选择其中某个表单元素。\nmaxlength属性：规定输入字段中的字符的最大长度。maxlength是用户可以输入的最多的字符数。\n\u0026lt;label\u0026gt;标签：为input元素定义标注(标签)。\u0026lt;label\u0026gt;标签用于绑定一个表单元素当点击\u0026lt;label\u0026gt;标签内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验。核心：\u0026lt;label\u0026gt;中的for属性的值和\u0026lt;input\u0026gt;中的id属性的值相同 1 2 \u0026lt;label for=\u0026#34;sex\u0026#34;\u0026gt;male\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;sex\u0026#34; id=\u0026#34;sex\u0026#34; /\u0026gt; select下拉表单元素：\u0026lt;select\u0026gt;标签定义下拉列表。\n1 2 3 4 5 \u0026lt;select\u0026gt; \u0026lt;option\u0026gt; 选项1 \u0026lt;/option\u0026gt; \u0026lt;option\u0026gt; 选项2 \u0026lt;/option\u0026gt; \u0026lt;option\u0026gt; 选项3 \u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;select\u0026gt;中至少包含一对\u0026lt;option\u0026gt;。 在\u0026lt;option\u0026gt;中定义selected=\u0026quot;selected\u0026quot;时，当前项即为默认选中项。 textarea文本域元素：当用户输入内容较多的情况下，我们就不能使用文本框表单了，此时我们可以使用\u0026lt;textarea\u0026gt;标签。\u0026lt;textarea\u0026gt;标签用于定义多行文本输入的控件。\n1 \u0026lt;textarea rows=\u0026#34;3\u0026#34; col=\u0026#34;20\u0026#34;\u0026gt;默认文本内容\u0026lt;/textarea\u0026gt; 其中两个属性rows=\u0026quot;显示的行数\u0026quot;和col=\u0026quot;每行中的字符数\u0026quot;，在实际开发中不会使用，用css来调整大小。 HTML查阅文档：w3c 实用技巧\r让Markdown导出的PDF分页\n在需要分页的地方插入以下代码:\n1 \u0026lt;div STYLE=\u0026#34;page-break-after: always;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; ","date":"2025-02-18T22:42:40+08:00","image":"https://example.com/post_img/2025-02-18/html-logo.png","permalink":"https://example.com/p/notes-on-html/","title":"Notes on HTML"},{"content":"Update Hugo To Hugo-extended\rWhy not Hugo but Hugo-extended?\nSome themes use SCSS and TypeScript, that\u0026rsquo;s why Hugo extended version is required. If you are using a non-extended Hugo installation, you will get the following error:\n1 Error: Error building site: TOCSS: failed to transform \u0026#34;scss/style.scss\u0026#34; (text/x-scss): this feature is not available in your current Hugo version Download\rGet to https://github.com/gohugoio/hugo/releases and download e.g. hugo_extended_0.143.1_windows-amd64.zip. Or just winget in the cmd:\n1 winget install Hugo.Hugo.Extended Extract\rExtract the zip in the suitable location:\n1 2 3 4 5 PS D:\\\u0026gt; tree .\\hugo_extended /f /a D:\\HUGO_EXTENDED hugo.exe LICENSE README.md Verify\rVerify the installation:\n1 2 PS D:\\\u0026gt; D:/hugo_extended/hugo version hugo v0.143.1-0270364a347b2ece97e0321782b21904db515ecc+extended windows/amd64 BuildDate=2025-02-04T08:57:38Z VendorInfo=gohugoio After that, the origin hugo D:/hugo_dir can be deprecated and all the commands e.g. D:/hugo_dir/hugo can be changed to D:/hugo_extended/hugo. ✅\n","date":"2025-02-17T18:57:48+08:00","image":"https://example.com/post_img/2025-02-17/hugo-logo-wide.png","permalink":"https://example.com/p/update-hugo-to-hugo-extended/","title":"Update Hugo To Hugo-extended"},{"content":"Solve the problem of export latex code in Markdown as pdf\rFirst, download VSCode and the Markdown All in One extension.\nSecond, Ctrl + Shift + P and input Print current document to HTML.\nA html file is already created and with well-displayed latex equation.\n","date":"2024-12-09T18:50:29+08:00","permalink":"https://example.com/p/some-skills-on-exporting-latex-in-markdown-as-pdf/","title":"Some Skills on Exporting Latex in Markdown as pdf"},{"content":"Python permanently modifies pip mirror source\rIf change the mirror source to Tsinghua Mirror Source, type the following code in the Terminal:\n1 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple Install Cuda In Virtual Environment of Conda\rFirst Run the code in the Terminal to determine the version of Cuda:\n1 nvidia-smi CUDA Version is the version of cuda that the computer can support, so the version of cuda we want to install needs to be \u0026lt;= CUDA Version (backward compatible)\nRun the code in order in the Terminal:\n1 2 3 4 5 6 7 8 9 conda create -n env_name python=3.10 conda activate env_name # conda search cudatoolkit --info conda install cudatoolkit=11.8.0 conda install cudnn # pytorch official website: https://pytorch.org/get-started/locally/ conda install pytorch torchvision torchaudio pytorch-cuda=12.4 -c pytorch -c nvidia After installing the Cuda, Run the code in order in the Terminal and verify that Cuda was installed successfully:\n1 2 3 4 conda activate env_name python import torch print(torch.cuda.is_available()) ","date":"2024-10-18T15:28:15+08:00","permalink":"https://example.com/p/some-skills-on-modifying-pip-mirror-source-and-installing-cuda-in-conda/","title":"Some Skills on Modifying Pip Mirror Source and Installing Cuda in Conda"},{"content":"Image Pre-processing/Transformation\r1 2 3 4 5 6 7 8 9 10 11 train_tfm = transforms.Compose([ # Resize the images into the fixed size transforms.Resize((128, 128)), \u0026#39;\u0026#39;\u0026#39; Do some Image Enhancement \u0026#39;\u0026#39;\u0026#39; # ToTensor() should be the last transformation transforms.ToTensor(), ]) Geometric Transformations\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Rotation transform_rotate = transforms.RandomRotation(degrees=30) # Translation transform_translate = transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)) # Flipping transform_flip = transforms.RandomHorizontalFlip(p=0.5) # Scaling transform_scale = transforms.RandomResizedCrop(size=224, scale=(0.8, 1.0)) # Shearing transform_shear = transforms.RandomAffine(degrees=0, shear=20) Color Transformations\r1 2 3 4 5 6 7 8 9 10 11 # Brightness Adjustment transform_brightness = transforms.ColorJitter(brightness=0.5) # Contrast Adjustment transform_contrast = transforms.ColorJitter(contrast=0.5) # Satuation Adjustment transform_saturation = transforms.ColorJitter(saturation=0.5) # Hue Adjustment transform_hue = transforms.ColorJitter(hue=0.2) Cropping and Padding\r1 2 3 4 5 # Random Cropping transform_random_crop = transforms.RandomCrop(size=224) # Padding transform_padding = transforms.Pad(padding=4) Image Enhancement\r1 2 # Random Erasing transform_random_erasing = transforms.RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0) ","date":"2024-08-28T14:14:07+08:00","permalink":"https://example.com/p/some-skills-on-image-processing/","title":"Some Skills on Image Processing"},{"content":"Learning Diffusers\rInstallation\rWith pip\n1 pip install --upgrade diffusers[torch] With conda\n1 conda install -c conda-forge diffusers Use\rDirectly call the pretrained model uploaded in diffusers:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import torch from diffusers import DDPMPipeline device = torch.device(\u0026#34;cuda\u0026#34; if torch.cuda.is_available() else \u0026#34;cpu\u0026#34;) # Load the butterfly pipeline butterfly_pipeline = DDPMPipeline.from_pretrained( \u0026#34;johnowhitaker/ddpm-butterflies-32px\u0026#34; ).to(device) # Create 8 images images = butterfly_pipeline(batch_size=8).images # View the result make_grid(images) Example\rStep 0: Login and Initialize some useful functions\r1 2 3 4 # Login from huggingface_hub import notebook_login notebook_login() # copy the token in 1 2 3 4 5 6 7 8 9 10 11 12 13 import numpy as np import torch import torch.nn.functional as F from matplotlib import pyplot as plt from PIL import Image def show_images(x): \u0026#34;\u0026#34;\u0026#34;Given a batch of images x, make a grid and convert to PIL\u0026#34;\u0026#34;\u0026#34; x = x * 0.5 + 0.5 # Map from (-1, 1) back to (0, 1) grid = torchvision.utils.make_grid(x) grid_im = grid.detach().cpu().permute(1, 2, 0).clip(0, 1) * 255 grid_im = Image.fromarray(np.array(grid_im).astype(np.uint8)) return grid_im Step 1: Download a training dataset\rFor this example, we\u0026rsquo;ll use a dataset of images from the Hugging Face Hub. Specifically, this collection of 1000 butterfly pictures.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import torchvision from datasets import load_dataset from torchvision import transforms # Load dataset from https://huggingface.co/datasets/huggan/smithsonian_butterflies_subset dataset = load_dataset(\u0026#34;huggan/smithsonian_butterflies_subset\u0026#34;, split=\u0026#34;train\u0026#34;) \u0026#39;\u0026#39;\u0026#39; # Or load images from a local folder dataset = load_dataset(\u0026#34;imagefolder\u0026#34;, data_dir=\u0026#34;path/to/folder\u0026#34;) \u0026#39;\u0026#39;\u0026#39; # We\u0026#39;ll train on 32-pixel square images, but you can try larger sizes too image_size = 32 # You can lower your batch size if you\u0026#39;re running out of GPU memory batch_size = 64 # Define data augmentations preprocess = transforms.Compose( [ transforms.Resize((image_size, image_size)), # Resize transforms.RandomHorizontalFlip(), # Randomly flip (data augmentation) transforms.ToTensor(), # Convert to tensor (0, 1) transforms.Normalize([0.5], [0.5]), # Map to (-1, 1) ] ) def transform(examples): images = [preprocess(image.convert(\u0026#34;RGB\u0026#34;)) for image in examples[\u0026#34;image\u0026#34;]] return {\u0026#34;images\u0026#34;: images} dataset.set_transform(transform) # Create a dataloader from the dataset to serve up the transformed images in batches; Save the images in the dataloader train_dataloader = torch.utils.data.DataLoader( dataset, batch_size=batch_size, shuffle=True ) View the first 8 image examples in the dataset:\n1 2 3 xb = next(iter(train_dataloader))[\u0026#34;images\u0026#34;].to(device)[:8] print(\u0026#34;X shape:\u0026#34;, xb.shape) show_images(xb).resize((8 * 64, 64), resample=Image.NEAREST) Step 2: Define the Scheduler\rOur plan for training is to take these input images and add noise to them, then feed the noisy images to the model. And during inference, we will use the model predictions to iteratively remove noise. In diffusers, these processes are both handled by the scheduler.\nThe noise schedule determines how much noise is added at different timesteps.\n1 2 3 from diffusers import DDPMScheduler # Define a Scheduler noise_scheduler = DDPMScheduler(num_train_timesteps=1000) 1 2 3 4 5 6 7 # Add noise and View the process of noise-adding # The core is add_noise() timesteps = torch.linspace(0, 999, 8).long().to(device) noise = torch.randn_like(xb) # Random a noise from standard Guassian N(0,I) noisy_xb = noise_scheduler.add_noise(xb, noise, timesteps) print(\u0026#34;Noisy X shape\u0026#34;, noisy_xb.shape) show_images(noisy_xb).resize((8 * 64, 64), resample=Image.NEAREST) Step 3: Define the Model\rMost diffusion models use architectures that are some variant of a U-Net and that\u0026rsquo;s what we\u0026rsquo;ll use here.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from diffusers import UNet2DModel # Create a model model = UNet2DModel( sample_size=image_size, # the target image resolution in_channels=3, # the number of input channels, 3 for RGB images out_channels=3, # the number of output channels layers_per_block=2, # how many ResNet layers to use per UNet block block_out_channels=(64, 128, 128, 256), # More channels -\u0026gt; more parameters down_block_types=( \u0026#34;DownBlock2D\u0026#34;, # a regular ResNet downsampling block \u0026#34;DownBlock2D\u0026#34;, \u0026#34;AttnDownBlock2D\u0026#34;, # a ResNet downsampling block with spatial self-attention \u0026#34;AttnDownBlock2D\u0026#34;, ), up_block_types=( \u0026#34;AttnUpBlock2D\u0026#34;, \u0026#34;AttnUpBlock2D\u0026#34;, # a ResNet upsampling block with spatial self-attention \u0026#34;UpBlock2D\u0026#34;, \u0026#34;UpBlock2D\u0026#34;, # a regular ResNet upsampling block ), ) model.to(device) When dealing with higher-resolution inputs you may want to use more down and up-blocks, and keep the attention layers only at the lowest resolution (bottom) layers to reduce memory usage.\n1 2 3 4 # Check that passing in a batch of data and some random timesteps produces an output the same shape as the input data: with torch.no_grad(): model_prediction = model(noisy_xb, timesteps).sample model_prediction.shape Step 4: Training: Create a Training Loop\rFor each batch of data, we\nSample some random timesteps Noise the data accordingly Feed the noisy data through the model Compare the model predictions with the target (i.e. the noise in this case) using mean squared error as our loss function Update the model parameters via loss.backward() and optimizer.step() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # Set the noise scheduler noise_scheduler = DDPMScheduler( num_train_timesteps=1000, beta_schedule=\u0026#34;squaredcos_cap_v2\u0026#34; ) # Training loop optimizer = torch.optim.AdamW(model.parameters(), lr=4e-4) losses = [] # Loop through the training epoch for epoch in range(30): # Loop through all data for step, batch in enumerate(train_dataloader): # Set the Scheduler # Load the data clean_images = batch[\u0026#34;images\u0026#34;].to(device) # Sample noise to add to the images noise = torch.randn(clean_images.shape).to(clean_images.device) bs = clean_images.shape[0] # Sample a random timestep for each image timesteps = torch.randint( 0, noise_scheduler.num_train_timesteps, (bs,), device=clean_images.device ).long() # Add noise to the clean images according to the noise magnitude at each timestep noisy_images = noise_scheduler.add_noise(clean_images, noise, timesteps) # Input the noisy_images to the model and Get the model prediction noise_pred = model(noisy_images, timesteps, return_dict=False)[0] # Calculate the loss loss = F.mse_loss(noise_pred, noise) loss.backward(loss) losses.append(loss.item()) # Update the model parameters with the optimizer optimizer.step() optimizer.zero_grad() if (epoch + 1) % 5 == 0: loss_last_epoch = sum(losses[-len(train_dataloader) :]) / len(train_dataloader) print(f\u0026#34;Epoch:{epoch+1}, loss: {loss_last_epoch}\u0026#34;) 1 2 3 4 5 # Plot the loss fig, axs = plt.subplots(1, 2, figsize=(12, 4)) axs[0].plot(losses) axs[1].plot(np.log(losses)) plt.show() Step 5: Generate Images\rMethod 1: Create a pipeline 1 2 3 4 from diffusers import DDPMPipeline image_pipe = DDPMPipeline(unet=model, scheduler=noise_scheduler) pipeline_output = image_pipe() pipeline_output.images[0] 1 2 # save a pipeline to a local folder like so: image_pipe.save_pretrained(\u0026#34;my_pipeline\u0026#34;) 1 2 3 4 # Inspecting the folder contents: ls my_pipeline/ # Output: model_index.json scheduler unet # The `scheduler` and `unet` subfolders contain everything needed to re-create those components. For example, inside the `unet` folder you\u0026#39;ll find the model weights (`diffusion_pytorch_model.bin`) alongside a config file which specifies the UNet architecture. Method 2: Writing a Sampling Loop 1 2 3 4 5 6 7 8 9 10 11 12 13 # Random starting point (8 random images): sample = torch.randn(8, 3, 32, 32).to(device) # A specific process of denoising and generating the images for i, t in enumerate(noise_scheduler.timesteps): # Get model pred with torch.no_grad(): residual = model(sample, t).sample # Update sample with step sample = noise_scheduler.step(residual, t, sample).prev_sample show_images(sample) ","date":"2024-08-11T12:09:12+08:00","permalink":"https://example.com/p/diffusers/","title":"Diffusers"},{"content":"\r","date":"2024-08-02T11:22:51+08:00","permalink":"https://example.com/p/2024.08.02/","title":"2024.08.02"},{"content":"Difference Between PCA and AutoEncoder\rPCA\rSuppose there are m n-dimensional data, $ X_{n \\times m} = [x_1, x_2,\u0026hellip;, x_m]$, where each $x$ is an n-dimensional column vector.\nReduce Dimensionality\rDecentralize the data: $x_{i} = x_{i} - \\frac{1}{m} \\sum_{j=1}^{m} x_{j}$ and update $X$ Calculate the Covariance matrix: $C = \\frac{1}{m} XX^T$ Take eigenvalue decomposition of the Covariance matrix $C$ and get the eigenvector matrix (the eigenvector is arranged in columns from the related largest to smallest eigenvalues). Take the first $k$ columns to form the matrix $P_{n \\times k}$ Project the original data into the $P$ coordinate system to get the dimensionality reduced data: $Y_{k \\times m} = P_{n \\times k}^T \\times X_{n \\times m}$, which is a linear transformation. The dimension of the data after PCA is changed compared to the origin data. Data Reconstruction\rPCA is lossy, that is, the compressed data does not maintain all the information of the original data, so the compressed data can not be restored back to the original high-dimensional data, but the restored data can be regarded as an approximation of the original data: $X_{n \\times m}^{\u0026rsquo;} = P_{n \\times k} Y_{k \\times m}$\nAutoEncoder\rEncoder\rThe original data $X$ is input, and then compressed according to the network model, the original high dimensional data $X$ is compressed into low dimensional data C, and these low dimensional data is usually customarily referred to as latent vector, the original data after the activation function operation of the nonlinear hidden layer, the original data will be transformed into a low dimensional space, this space is considered to be the high-feature space. After the original data is operated by the activation function of the nonlinear hidden layer, the original data will be transformed to a low-dimensional space, which is considered as the high-feature space. AutoEncoder is a non-linear transformation. The dimension of the data after Encoder is the same as the origin data.\nDecoder\rConvert the original implicit layer data back into the original data space.\nHow to design the network\rFor simple datasets such as MNIST, a network with 1-2 hidden layers is usually sufficient. However, a network with 3 or more hidden layers can capture more complex features, but can also lead to overfitting.\nAs for MNIST, the number of nodes in the hidden layer should decrease layer by layer, usually the number of nodes in the last layer of the encoder, i.e., the dimension of the potential space, can be chosen from 32 to 128.\nCode Example:\rAutoEncoder on MNIST dataset:\n1 2 3 4 5 6 7 8 self.encoder = nn.Sequential( nn.Linear(28 * 28, 128), nn.ReLU(True), nn.Linear(128, 64), nn.ReLU(True), nn.Linear(64, 32) ) # Design of the network can be changed 1 2 3 4 5 6 7 8 9 self.decoder = nn.Sequential( nn.Linear(32, 64), nn.ReLU(True), nn.Linear(64, 128), nn.ReLU(True), nn.Linear(128, 28 * 28), nn.Tanh() ) # Design of the network can be changed ","date":"2024-07-20T14:13:42+08:00","permalink":"https://example.com/p/pca-and-autoencoder/","title":"PCA and AutoEncoder"},{"content":"Study on Score-Based Generative Modeling\r(●\u0026rsquo;◡\u0026rsquo;●)\nAbout Score-Based Generative Modeling: the following article has given a clear explanation: Diffusion Model: SDE\nA simple conclusion of the Score-Based Generative Modeling through Stochastic Differential Equations: Generalization of discrete models such as DDPM to continuous SDE forms, through predictor-corrector samplers to correct the solution of a numerical SDE solver.\n","date":"2024-07-18T23:45:09+08:00","permalink":"https://example.com/p/2024.07.18/","title":"2024.07.18"},{"content":"Build A Github Repository\rԅ(¯﹃¯ԅ)\nInitialize\rCreate a Github repository and set the repository name.\nLink to Github\rRun the code in order in the PowerShell under the target directory:\n1 2 3 4 5 6 cd dir_name git init git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin https://github.com/.... git push origin main Hugo: Local Preview\rHugo comes with a built-in development server that allows you to preview the site in real time on the server:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 cd D:/html D:/hugo_extended/hugo server Watching for changes in D:\\html\\{archetypes,assets,content,data,i18n,layouts,static,themes} Watching for config changes in D:\\html\\hugo.yaml, D:\\html\\themes\\hugo-theme-stack\\config.yaml Start building sites … hugo v0.143.1-0270364a347b2ece97e0321782b21904db515ecc+extended windows/amd64 BuildDate=2025-02-04T08:57:38Z VendorInfo=gohugoio | EN -------------------+----- Pages | 48 Paginator pages | 2 Non-page files | 0 Static files | 13 Processed images | 0 Aliases | 16 Cleaned | 0 Built in 409 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop It supports for real-time revising and updating.\nHugo: Write A Post\rNew a post\r( •̀ .̫ •́ )✧\nRun the code in order in the PowerShell:\n1 2 cd D:/html D:/hugo_extended/hugo new post/fileName.md Push to Github\r(｡･ω･｡)ﾉ♡\nRun the code in order in the PowerShell:\n1 2 3 4 5 D:/hugo_extended/hugo cd public git add . git commit -m \u0026#34;test\u0026#34; git push origin main ","date":"2024-07-16T14:16:38+08:00","permalink":"https://example.com/p/starting-from-scratch-creating-and-pushing-your-blog-posts-with-hugo-and-git/","title":"Starting from Scratch: Creating and Pushing Your Blog Posts with Hugo and Git"},{"content":"Hello Serendpity\u0026rsquo;s Blog\rThis is Serendpity\u0026rsquo;s first blog post. Love you all! ( •̀ ω •́ )y\n","date":"2024-07-16T13:40:30+08:00","permalink":"https://example.com/p/my-first-blog/","title":"My First Blog"}]